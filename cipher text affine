#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int modInverse(int a, int m) {
    a = a % m;
    for (int x = 1; x < m; x++)
        if ((a * x) % m == 1)
            return x;
    return -1;
}

void affineDecrypt(char ciphertext[], int a, int b) {
    int len = strlen(ciphertext);
    int aInverse = modInverse(a, 26);

    for (int i = 0; i < len; i++) {
        if (isalpha(ciphertext[i])) {
            int c = toupper(ciphertext[i]) - 'A';
            int p = (aInverse * (c - b + 26)) % 26;
            printf("%c", p + 'A');
        } else {
            printf("%c", ciphertext[i]);
        }
    }
}

int main() {
    char ciphertext[] = "BUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBUBU";
    char mostFrequentLetter = 'B'; // Map this to 'E'
    char secondMostFrequentLetter = 'U'; // Map this to 'T'
    int a = (mostFrequentLetter - 'E' + 26) % 26;
    int b = (secondMostFrequentLetter - 'T' + 26) % 26;

    printf("Ciphertext: %s\n", ciphertext);
    printf("Assuming most frequent letter is 'B' and second most frequent letter is 'U'\n");
    printf("Decrypted: ");
    affineDecrypt(ciphertext, a, b);
    printf("\n");

    return 0;
}
